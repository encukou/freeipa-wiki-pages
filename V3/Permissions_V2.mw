__NOTOC__

{{Admon/important|Work in progress|This design is not complete yet.
  However if you have any comments, please feel free to discuss them.}}

= Overview =

The internal workings of Permissions
and their relationship to ACIs are overhauled.

* Permission flags are extended to insure backwards compatibility
* Permission ACIs may be located in any container, not just $SUFFIX
* Permission entries now contain all data needed to (re-)generate (or check) the ACI
* It is now possible to grand read rights

= Use Cases =

This feature brings no major user-visible changes,
but will enable development of
[[V3/Managed Read permissions|Managed Read permissions]].

= Design =

== V2 permissions ==

This document describes the semantics of "V2" permissions.
These are permissions with a "V2" flag.

V2 permissions cannot be modified by older versions of IPA.
An old-style permission will be converted to V2 whenever it is modified.
(TODO: Or on server upgrade, see "Mass update" section)

Assigning permissions to privileges will still be possible
on older IPA servers.

== Permission flags ==

Permission objects can have flags in their "ipaPermissionType" attribute.
Currently we use one such flag, SYSTEM, which means that the underlying ACI
is not managed by the Permission object.
The code does not even assume an underlying ACI exists for SYSTEM permissions.

The permission flags will be repurposed to allow adding new
functionality while retaining a degree of backwards compatibility.

New flags will be added for additional features.
Permissions that have an unknown flag will be assumed to have unknown
semantics implemented in future IPA versions,
and the underlying ACI will not be manipulated (as with current SYSTEM flags).

For compatibility with old versions of IPA,
all new flags must be accompanied by SYSTEM.
Permissions with ''only'' the SYSTEM flag retain the old semantics.

== Data in the permission entry ==

The new permission objects will contain
all data needed to generate (or check) the ACI.
This means IPA code will no longer need to parse ACIs
(except when upgrading old permissions).
Any change to a Permission will result
in removing any old ACI and adding a new one.

The new attributes (including those from other related designs) is as follows:

 attributeTypes: (2.16.840.1.113730.3.8.11.42 NAME 'ipaPermDefaultAttr' DESC 'IPA permission default attribute' EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 X-ORIGIN 'IPA v3' )
 attributeTypes: (2.16.840.1.113730.3.8.11.43 NAME 'ipaPermAllowedAttr' DESC 'IPA permission explicitly allowed attribute' EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 X-ORIGIN 'IPA v3' )
 attributeTypes: (2.16.840.1.113730.3.8.11.44 NAME 'ipaPermExcludedAttr' DESC 'IPA permission explicitly excluded attribute' EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 X-ORIGIN 'IPA v3' )
 attributeTypes: (2.16.840.1.113730.3.8.11.45 NAME 'ipaPermBindRuleType' DESC 'IPA permission bind rule type' EQUALITY caseExactMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE X-ORIGIN 'IPA v3' )
 attributeTypes: (2.16.840.1.113730.3.8.11.46 NAME 'ipaPermLocation' DESC 'Location of IPA permission ACI' EQUALITY distinguishedNameMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.12 SINGLE-VALUE X-ORIGIN 'IPA v3' )
 attributeTypes: (2.16.840.1.113730.3.8.11.47 NAME 'ipaPermRight' DESC 'IPA permission rights' EQUALITY caseIgnoreMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE X-ORIGIN 'IPA v3' )
 attributeTypes: (2.16.840.1.113730.3.8.11.48 NAME 'ipaPermTargetFilter' DESC 'IPA permission target filter' EQUALITY caseIgnoreMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 X-ORIGIN 'IPA v3' )
 attributeTypes: (2.16.840.1.113730.3.8.11.49 NAME 'ipaPermTarget' DESC 'IPA permission target' EQUALITY caseIgnoreMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 X-ORIGIN 'IPA v3' )

All of these will be added as MAY to the <tt>ipaPermission</tt> objectclass.
The <tt>ipaUniqueID</tt> attribute will also be added to <tt>ipaPermission</tt>.

* ipaPermAllowedAttr lists the attributes of the ACI
* the other ipaPerm*Attr are for Managed permissions, explained in [[V3/Managed Read permissions]]
* ipaPermBindRuleType is for general access ACIs, explained in [[V3/Anonymous and Any permissions]]
* ipaPermLocation is the location of the ACI in the tree, explained below
* ipaPermRight is the right(s) the permission grants (add, write, delete, etc.)
* ipaPermTargetFilter & ipaPermTarget contain the corresponding parts of the ACI

== Moving ACIs out of the root ==

ACIs will be created on appropriate containers, rather than in the $SUFFIX.
This will increase performance of LDAP operations,
as fewer ACIs need to be checked for an entry.

The location of the ACI will be determined by <tt>ipaPermLocation</tt>.

== Option/Attribute mapping ==

Due to technical reasons,
API parameters need to be named the same as LDAP attributes.
(This assumption runs rather deep in the framework,
and makes adding new LDAP attributes for previously existing options
somewhat complicated.)

In each of the following pairs of options,
the two are mutually exclusive;
if the second is present it acts as the first one.
The second option will only be available when called with a lower API version
than the one where V2 permissions are introduced.

   API name            CLI name
   -------------------------------
 / ipapermright        permissions
 \ permissions         (no_cli)
 
 / ipapermallowedattr  attrs
 \ attrs               (no_cli)
 
 / ipapermtargetfilter filter
 \ filter              (no_cli)
 
 / ipapermlocation     subtree
 \ subtree             (no_cli)

For output, the variant used will depend on the API version.

A new no-cli option will be added: <tt>ipapermtarget</tt>.

IPA will validate the filter before setting it by performing a search.

Finally, 3 existing options will be available to set the above:

<tt>memberof</tt> will set target filter to <tt>(memberOf={group})</tt>,
after checking that the group exists.

<tt>targetgroup</tt> will set target to <tt>ldap:///{group}</tt>,
after checking that the group exists.

<tt>type</tt> will set target filter and location to one of pre-defined values
correspondint to IPA object types.
It cannot be specified together with <tt>ipaPermLocation</tt>.

<tt>memberof</tt>, <tt>targetgroup</tt>, <tt>type</tt>, <tt>filter</tt> are mutually exclusive.

These values will be output
if the filter/target/location values match the respective patterns.

== Modifying and Upgrading Permissions ==

A permission object can not be modified if:
* it has any unknown flags (<tt>ipaPermissionType</tt>), or
* it has *only* the SYSTEM flag

The process for modifying a permission (and its ACI) is as follows:

1. Before a permission object is changed, its corresponding ACI is found using
the old permission name and ipaPermLocation (which defaults to $SUFFIX).

2. If the permission object does not have any flags (i.e. it is an old-style
permission), the ACI is parsed and appropriate attributes are set to values
from the ACI, and SYSTEM and V2 flags are added.

3. The old ACI is deleted (regardless of whether an upgrade took place).

4. The permission entry is changed.

5. A new ACI text is created from updated attributes and added to the
corresponding location.

The process through the following states, so only they are possible results if
an error occurs:
* old permission, old ACI
* old permission, no ACI
* new permission, no ACI
* new permission, new ACI

In all cases where data ends up inconsistent, no access is granted:
the process is fail-secure.

== Mass update ==

Old permisisons can be updated to V2 by running the process in
"Modifying and Upgrading Permissions" on all permissions without the
SYSTEM flag.
We can run this process either
* Now (when V2 permissions are introduced), or
* In the release where we introduce an audit tool, or
* Never, users upgrade manually

TODO: Which one?

(The upgrade-on-modify mechanism,
and permission-{find,show} for old-style permissions,
need to be in place in any case,
because old-style permisisons can be created on old servers.)

== Find/show for old permissions ==

Old-style permissions will continue be recognized by permission-{find,show}
commands.

TODO: details

== Read rights ==

The "read", "search", and "compare" rights are added to
"write", "add", "delete", and "all" in the list of
rights that can be granted (ipaPermRight).

== UI ==

The UI will need to be updated to use the attribute names in the API,
see the "Option/Attribute mapping" section.

= Implementation =

No additional requirements or changes discovered during the implementation phase.

= Feature Management =

=== UI ===

N/A

=== CLI ===

N/A

= Major configuration options and enablement =

N/A

= Replication =

N/A

= Updates and Upgrades =

See "V2 permissions" for an overview of backwards compatibility issues,
and the "Mass update" section and other parts of this document
for technical details.

= Dependencies =

No new package and library dependencies.

= External Impact =

Tests might need to be adjusted.

TODO: Does documentation cover premission/ACI internals, or API?
It might need updating.

= Backup and Restore =

All changes are to the DIT which is backed up normally.

= Test Plan =

TODO; the permission tests need to be extended.

= RFE Author =

[[User:Pviktorin|Petr Viktorin]]
